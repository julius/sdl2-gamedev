import os, re, imp

Import('env')

base ='#/src'
target = '#/bin/main'

cppFiles      = Glob('*.cpp')     + Glob('*/*.cpp')     + Glob('*/*/*.cpp')
cppFilesPrune = Glob('main.cpp') + Glob('Test*.cpp') + Glob('*/Test*.cpp') + Glob('*/*/Test*.cpp')
testFiles     = Glob('Test*.h')   + Glob('*/Test*.h')   + Glob('*/*/Test*.h')
sourceFiles = list(set(cppFiles) - set(cppFilesPrune))

pathBoost = os.environ["BOOSTDIR"];
pathQt    = os.environ["QTDIR"];
pathEigen = os.environ["EIGENDIR"];
pathSdl  = os.environ["SDL2DIR"];
pathGlm   = os.environ["GLMDIR"];
pathAngel  = os.environ["ANGELSCRIPTDIR"];

libs = ['SDL2', 'SDL2_image', 'SDL2_ttf', 'SDL2_mixer',
        'angelscript',
        'pthread', 'GL', 'GLU', 'm', 'dl', 'rt']


angelAddons = ['scriptbuilder', 'scriptstdstring']

libpaths = [
   pathBoost + "/lib",
   #    pathQt + "/lib",
   pathAngel + '/lib',
   pathSdl + '/lib']

sourcepaths = [
    base,
    pathBoost,
    pathGlm,
    pathAngel + '/include',
 #   os.environ["CXXTESTDIR"],
    #    pathQt + "/include",
    #    pathEigen
    pathSdl + "/include/"]


cppflags = ['-O0', '-g', '-fno-strict-aliasing',
            '-D_REENTRANT', '-DBOOST_FILESYSTEM_NO_DEPRECATED']
#cppflags = ['-O3', '-DGL_GLEXT_PROTOTYPES', '-D_REENTRANT']

# Custom guards
# --------------------
# cppflags.append(['-DLOGGING_DISABLED'])    # Disables all logging
# cppflags.append(['-DLOG2STREAM_DISABLED']) # Disables logging to stream
# cppflags.append(['-DLOG2FILE_DISABLED'])   # Disables logging to file

# Adding ignore paths for external libraries
cppflags.append(['-isystem', pathBoost,
                 '-isystem', pathSdl + '/include/',
                 '-isystem', pathAngel + '/include',
                 '-isystem', pathAngel + '/include/angelscript'])
for addon in angelAddons:
   cppflags.append(['-isystem', pathAngel + '/addon/' + addon])


if env['CXX'] == 'g++-latest':
   cppflags.append(['-std=c++0x'])
#'-Waggregate-return', # Problem with iterators in stl containers.
   cppflags.append([
         '-Wall', '-Wextra', '-Wcast-align', '-Wcast-qual',
         '-Wconversion', '-Wdisabled-optimization', '-Weffc++',
         '-Wfloat-equal', '-Wformat=2', '-Wimport', '-Winit-self',
         '-Winline', '-Winvalid-pch', '-Wlong-long',
         '-Wmissing-format-attribute', '-Wmissing-include-dirs',
         '-Wmissing-noreturn', '-Wpacked', '-Wpointer-arith',
         '-Wredundant-decls', '-Wshadow', '-Wstack-protector',
         '-Wstrict-aliasing=2', '-Wunreachable-code',
         '-Wunsafe-loop-optimizations', '-Wunused',
         '-Wvariadic-macros', '-Wwrite-strings', '-pedantic',
         '-pedantic-errors', '-Woverloaded-virtual',
         '-Wswitch-enum'])

elif env['CXX'] == 'clang':
   cppflags.append(['-std=c++11'])

angelSources = []
for addon in angelAddons:
   addonPath = pathAngel + '/addon/' + addon
   assert os.path.exists(addonPath), "NOT A DIRECTORY: [" + addonPath + "]"
   angelSources += Glob(addonPath + '/*.cpp')
angellib = env.StaticLibrary('#/lib/angeladdon', angelSources,
                             LIBS = libs,
                             LIBPATH = [pathAngel + '/lib'],
                             CPPFLAGS = cppflags,
                             CPPPATH = [pathAngel + '/include']);
Default(angellib)

applib = env.StaticLibrary('#/lib/main', sourceFiles,
                           LIBS = libs,
                           LIBPATH = libpaths,
                           CPPFLAGS = cppflags,
                           CPPPATH = sourcepaths);
Default(applib)
Clean(applib, '#/build')

cppMain = Glob('main.cpp')
app = env.Program(target, cppMain,
                  LIBS = applib + angellib + libs,
                  LIBPATH = libpaths,
                  CPPFLAGS = cppflags,
                  CPPPATH = sourcepaths);
Default(app)

