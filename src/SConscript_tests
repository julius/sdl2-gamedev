import os, re, imp, hashlib, base64
Import('env')

base ='#/src'
target = '#/bin/main'

cppFiles      = Glob('*.cpp')     + Glob('*/*.cpp')     + Glob('*/*/*.cpp')
cppFilesPrune = Glob('main.cpp') + Glob('Test*.cpp') + Glob('*/Test*.cpp') + Glob('*/*/Test*.cpp')
testFiles     = Glob('Test*.h')   + Glob('*/Test*.h')   + Glob('*/*/Test*.h')
sourceFiles = list(set(cppFiles) - set(cppFilesPrune))

# # Macros definitions
cppflags = ['-O0', '-g', '-std=c++11', '-fno-strict-aliasing',
            '-D_REENTRANT', '-DBOOST_FILESYSTEM_NO_DEPRECATED',
            '-DLOG2STREAM_DISABLED']

macroDefinitions = [
#   'SLOW_TESTS',  # ENABLES SLOW TESTS
]
for macro in macroDefinitions:
   cppflags.append('-D' + macro)

pathBoost = os.environ['BOOSTDIR'];
pathSdl  = os.environ['SDL2DIR'];
pathAngel  = os.environ["ANGELSCRIPTDIR"];
pathBullet = os.environ["BULLETDIR"];
pathCxxTest = os.environ['CXXTESTDIR'];
pathCxxTestBuilder = pathCxxTest + '/build_tools/SCons/'

cppflags.extend(['-isystem', pathSdl + '/include/'])

env_test = env.Clone(tools=['default','cxxtest'],
                     toolpath=['#/common', pathCxxTestBuilder])
env_test.Replace(CXXTEST_INSTALL_DIR = pathCxxTest)
env_test.Replace(CXXTEST_SUFFIX = '.h')
env_test.Replace(CXXFLAGS = ' '.join(cppflags))
env_test.Replace(CXXTEST_CPPPATH = ['#/src', pathCxxTest])
env_test.Replace(CXXTEST_OPTS = '--have-eh')

sourcepaths = [pathBoost + "/include/", pathSdl + '/include/', pathAngel + '/include']
libs = ['main', 'angeladdon', 'SDL2', 'SDL2_image', 'SDL2_ttf', 'SDL2_mixer',
        'BulletCollision', 'BulletDynamics', 'LinearMath',
        'angelscript', 'boost_system', 'boost_filesystem',
        'GL', 'GLU']
libpaths = [pathBoost + '/lib', pathSdl + '/lib', pathAngel + '/lib', '#/lib',
            pathBullet + '/lib']
env_test.Replace(CPPPATH=sourcepaths)
env_test.Replace(LIBS=libs)
env_test.Replace(LIBPATH=libpaths)
env_test.Replace(CXX=env['CXX'])

# TODO, only rebuild if TestFILE.h is modified from last compilation.
# load table of md5sum table
def hashfile(afile, hasher, blocksize=65536):
   buf = afile.read(blocksize)
   while len(buf) > 0:
      hasher.update(buf)
      buf = afile.read(blocksize)
   return hasher.digest()

def loadHashTable(hashTableFilename):
   table={}
   if os.path.isfile(hashTableFilename):
      hashTableFile=open(hashTableFilename, 'r')
      for line in hashTableFile.readlines():
         v = line.strip().split(' ')
         table[v[1]] = v[0]
   return table

def checkHash(table, hashvalue):
   if hashvalue in table:
      return table[hashvalue]
   else:
      return ''

hashTable = loadHashTable('hashTable')
hashTableFile=open('hashTable', 'w')

for tf in testFiles: #and also in the table with different md5sum
   filepath='../src/'+str(tf)
   if os.path.isfile(filepath):
      testfile = open(filepath, 'rb')
      testfileMd5 = hashfile(testfile, hashlib.md5())
      base64hash = base64.b64encode(testfileMd5)
      hashTableFile.write(base64hash+" "+str(tf) + '\n')
      if (checkHash(hashTable, str(tf)) == base64hash):
         continue

   # update md5sum table
   test = env_test.CxxTest('#/bin/tests/Test' + re.search('.*Test(.+?)\.h',
                                                          str(tf)).group(1), tf)
   Clean(test, '#/build')
   Default(test)
